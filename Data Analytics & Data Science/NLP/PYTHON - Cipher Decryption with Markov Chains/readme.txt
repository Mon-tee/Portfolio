Overview
This project explores the use of probabilistic modeling via Markov chains to decrypt a substitution cipher. The substitution cipher is generated by shuffling ASCII letters, and Markov chains are used to model the conditional transitions of letters, ultimately aiding in deciphering the encoded message.

Project Structure
data: Contains the text file from Project Gutenberg used for training the decryption model.
scripts: Holds modular Python functions for the following tasks:
Initializing Markov matrices (1st, 2nd, and 3rd order).
Updating matrices with conditional letter transitions.
Plotting graphs and visualizations to showcase the results.

How It Works
Data Collection: The project begins by downloading a plain text file to act as the training data for the Markov model.

Substitution Cipher Mapping:
A dictionary (true_mapping) is created by shuffling the ASCII lowercase letters.
This dictionary simulates a substitution cipher for encoding.

Markov Chain Model:
Three Markov matrices are initialized to capture different levels of conditional transitions.
update_transition function updates the matrices based on the characters passed, determining transition probabilities.

Decryption:
The Markov matrices analyze text from the ciphered document.
Transition probabilities and letter frequencies are used to guess substitutions and recover the original message.

Visualization:
Uses matplotlib to plot graphs for interpreting the results and validating the accuracy of the decryption.

Usage
Prerequisites:
Python 3.6+
NumPy
Matplotlib

Setup:
Download the repository or copy the Jupyter notebook.
Run the code cells sequentially to initialize the cipher mapping and set up the Markov matrices.

Execution:
Modify the update_transition function to adjust character mappings.
Utilize provided functions to analyze transition probabilities and apply them to your cipher text.

Skills Showcased
Probabilistic Modeling: The Markov matrices leverage state transitions to model conditional probabilities of letters.
Data Visualization: Plots from matplotlib help analyze transition probabilities and final decrypted text.
Modular Programming: Functions are organized to handle different states and varying input arguments.

Future Improvements
Implement unit tests for functions like update_transition.
Add more comprehensive error handling for the decryption process.
Provide further documentation for each function to clarify purpose and use.
